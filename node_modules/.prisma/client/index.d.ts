
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export interface PrismaPromise<A> extends Promise<A> {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model responsible
 * 
 */
export type responsible = {
  id: number
  name: string
}

/**
 * Model task
 * 
 */
export type task = {
  id: number
  responsibleId: number
  name: string
  description: string
  day: Date
  status: string
}

/**
 * Model taskReport
 * 
 */
export type taskReport = {
  id: number
  description: string
  taskId: number
  responsibleId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Responsibles
 * const responsibles = await prisma.responsible.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Responsibles
   * const responsibles = await prisma.responsible.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.responsible`: Exposes CRUD operations for the **responsible** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Responsibles
    * const responsibles = await prisma.responsible.findMany()
    * ```
    */
  get responsible(): Prisma.responsibleDelegate<GlobalReject>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.taskDelegate<GlobalReject>;

  /**
   * `prisma.taskReport`: Exposes CRUD operations for the **taskReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TaskReports
    * const taskReports = await prisma.taskReport.findMany()
    * ```
    */
  get taskReport(): Prisma.taskReportDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.9.0
   * Query Engine version: ceb5c99003b99c9ee2c1d2e618e359c14aef2ea5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    responsible: 'responsible',
    task: 'task',
    taskReport: 'taskReport'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ResponsibleCountOutputType
   */


  export type ResponsibleCountOutputType = {
    task: number
    taskReport: number
  }

  export type ResponsibleCountOutputTypeSelect = {
    task?: boolean
    taskReport?: boolean
  }

  export type ResponsibleCountOutputTypeGetPayload<S extends boolean | null | undefined | ResponsibleCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ResponsibleCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ResponsibleCountOutputTypeArgs)
    ? ResponsibleCountOutputType 
    : S extends { select: any } & (ResponsibleCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ResponsibleCountOutputType ? ResponsibleCountOutputType[P] : never
  } 
      : ResponsibleCountOutputType




  // Custom InputTypes

  /**
   * ResponsibleCountOutputType without action
   */
  export type ResponsibleCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ResponsibleCountOutputType
     */
    select?: ResponsibleCountOutputTypeSelect | null
  }



  /**
   * Count Type TaskCountOutputType
   */


  export type TaskCountOutputType = {
    taskReport: number
  }

  export type TaskCountOutputTypeSelect = {
    taskReport?: boolean
  }

  export type TaskCountOutputTypeGetPayload<S extends boolean | null | undefined | TaskCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TaskCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TaskCountOutputTypeArgs)
    ? TaskCountOutputType 
    : S extends { select: any } & (TaskCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TaskCountOutputType ? TaskCountOutputType[P] : never
  } 
      : TaskCountOutputType




  // Custom InputTypes

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TaskCountOutputType
     */
    select?: TaskCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model responsible
   */


  export type AggregateResponsible = {
    _count: ResponsibleCountAggregateOutputType | null
    _avg: ResponsibleAvgAggregateOutputType | null
    _sum: ResponsibleSumAggregateOutputType | null
    _min: ResponsibleMinAggregateOutputType | null
    _max: ResponsibleMaxAggregateOutputType | null
  }

  export type ResponsibleAvgAggregateOutputType = {
    id: number | null
  }

  export type ResponsibleSumAggregateOutputType = {
    id: number | null
  }

  export type ResponsibleMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ResponsibleMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ResponsibleCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ResponsibleAvgAggregateInputType = {
    id?: true
  }

  export type ResponsibleSumAggregateInputType = {
    id?: true
  }

  export type ResponsibleMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ResponsibleMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ResponsibleCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ResponsibleAggregateArgs = {
    /**
     * Filter which responsible to aggregate.
     */
    where?: responsibleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of responsibles to fetch.
     */
    orderBy?: Enumerable<responsibleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: responsibleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` responsibles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` responsibles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned responsibles
    **/
    _count?: true | ResponsibleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResponsibleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResponsibleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResponsibleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResponsibleMaxAggregateInputType
  }

  export type GetResponsibleAggregateType<T extends ResponsibleAggregateArgs> = {
        [P in keyof T & keyof AggregateResponsible]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResponsible[P]>
      : GetScalarType<T[P], AggregateResponsible[P]>
  }




  export type ResponsibleGroupByArgs = {
    where?: responsibleWhereInput
    orderBy?: Enumerable<responsibleOrderByWithAggregationInput>
    by: ResponsibleScalarFieldEnum[]
    having?: responsibleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResponsibleCountAggregateInputType | true
    _avg?: ResponsibleAvgAggregateInputType
    _sum?: ResponsibleSumAggregateInputType
    _min?: ResponsibleMinAggregateInputType
    _max?: ResponsibleMaxAggregateInputType
  }


  export type ResponsibleGroupByOutputType = {
    id: number
    name: string
    _count: ResponsibleCountAggregateOutputType | null
    _avg: ResponsibleAvgAggregateOutputType | null
    _sum: ResponsibleSumAggregateOutputType | null
    _min: ResponsibleMinAggregateOutputType | null
    _max: ResponsibleMaxAggregateOutputType | null
  }

  type GetResponsibleGroupByPayload<T extends ResponsibleGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ResponsibleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResponsibleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResponsibleGroupByOutputType[P]>
            : GetScalarType<T[P], ResponsibleGroupByOutputType[P]>
        }
      >
    >


  export type responsibleSelect = {
    id?: boolean
    name?: boolean
    task?: boolean | responsible$taskArgs
    taskReport?: boolean | responsible$taskReportArgs
    _count?: boolean | ResponsibleCountOutputTypeArgs
  }


  export type responsibleInclude = {
    task?: boolean | responsible$taskArgs
    taskReport?: boolean | responsible$taskReportArgs
    _count?: boolean | ResponsibleCountOutputTypeArgs
  }

  export type responsibleGetPayload<S extends boolean | null | undefined | responsibleArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? responsible :
    S extends undefined ? never :
    S extends { include: any } & (responsibleArgs | responsibleFindManyArgs)
    ? responsible  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'task' ? Array < taskGetPayload<S['include'][P]>>  :
        P extends 'taskReport' ? Array < taskReportGetPayload<S['include'][P]>>  :
        P extends '_count' ? ResponsibleCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (responsibleArgs | responsibleFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'task' ? Array < taskGetPayload<S['select'][P]>>  :
        P extends 'taskReport' ? Array < taskReportGetPayload<S['select'][P]>>  :
        P extends '_count' ? ResponsibleCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof responsible ? responsible[P] : never
  } 
      : responsible


  type responsibleCountArgs = 
    Omit<responsibleFindManyArgs, 'select' | 'include'> & {
      select?: ResponsibleCountAggregateInputType | true
    }

  export interface responsibleDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Responsible that matches the filter.
     * @param {responsibleFindUniqueArgs} args - Arguments to find a Responsible
     * @example
     * // Get one Responsible
     * const responsible = await prisma.responsible.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends responsibleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, responsibleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'responsible'> extends True ? Prisma__responsibleClient<responsibleGetPayload<T>> : Prisma__responsibleClient<responsibleGetPayload<T> | null, null>

    /**
     * Find one Responsible that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {responsibleFindUniqueOrThrowArgs} args - Arguments to find a Responsible
     * @example
     * // Get one Responsible
     * const responsible = await prisma.responsible.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends responsibleFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, responsibleFindUniqueOrThrowArgs>
    ): Prisma__responsibleClient<responsibleGetPayload<T>>

    /**
     * Find the first Responsible that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {responsibleFindFirstArgs} args - Arguments to find a Responsible
     * @example
     * // Get one Responsible
     * const responsible = await prisma.responsible.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends responsibleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, responsibleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'responsible'> extends True ? Prisma__responsibleClient<responsibleGetPayload<T>> : Prisma__responsibleClient<responsibleGetPayload<T> | null, null>

    /**
     * Find the first Responsible that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {responsibleFindFirstOrThrowArgs} args - Arguments to find a Responsible
     * @example
     * // Get one Responsible
     * const responsible = await prisma.responsible.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends responsibleFindFirstOrThrowArgs>(
      args?: SelectSubset<T, responsibleFindFirstOrThrowArgs>
    ): Prisma__responsibleClient<responsibleGetPayload<T>>

    /**
     * Find zero or more Responsibles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {responsibleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Responsibles
     * const responsibles = await prisma.responsible.findMany()
     * 
     * // Get first 10 Responsibles
     * const responsibles = await prisma.responsible.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const responsibleWithIdOnly = await prisma.responsible.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends responsibleFindManyArgs>(
      args?: SelectSubset<T, responsibleFindManyArgs>
    ): PrismaPromise<Array<responsibleGetPayload<T>>>

    /**
     * Create a Responsible.
     * @param {responsibleCreateArgs} args - Arguments to create a Responsible.
     * @example
     * // Create one Responsible
     * const Responsible = await prisma.responsible.create({
     *   data: {
     *     // ... data to create a Responsible
     *   }
     * })
     * 
    **/
    create<T extends responsibleCreateArgs>(
      args: SelectSubset<T, responsibleCreateArgs>
    ): Prisma__responsibleClient<responsibleGetPayload<T>>

    /**
     * Create many Responsibles.
     *     @param {responsibleCreateManyArgs} args - Arguments to create many Responsibles.
     *     @example
     *     // Create many Responsibles
     *     const responsible = await prisma.responsible.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends responsibleCreateManyArgs>(
      args?: SelectSubset<T, responsibleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Responsible.
     * @param {responsibleDeleteArgs} args - Arguments to delete one Responsible.
     * @example
     * // Delete one Responsible
     * const Responsible = await prisma.responsible.delete({
     *   where: {
     *     // ... filter to delete one Responsible
     *   }
     * })
     * 
    **/
    delete<T extends responsibleDeleteArgs>(
      args: SelectSubset<T, responsibleDeleteArgs>
    ): Prisma__responsibleClient<responsibleGetPayload<T>>

    /**
     * Update one Responsible.
     * @param {responsibleUpdateArgs} args - Arguments to update one Responsible.
     * @example
     * // Update one Responsible
     * const responsible = await prisma.responsible.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends responsibleUpdateArgs>(
      args: SelectSubset<T, responsibleUpdateArgs>
    ): Prisma__responsibleClient<responsibleGetPayload<T>>

    /**
     * Delete zero or more Responsibles.
     * @param {responsibleDeleteManyArgs} args - Arguments to filter Responsibles to delete.
     * @example
     * // Delete a few Responsibles
     * const { count } = await prisma.responsible.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends responsibleDeleteManyArgs>(
      args?: SelectSubset<T, responsibleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Responsibles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {responsibleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Responsibles
     * const responsible = await prisma.responsible.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends responsibleUpdateManyArgs>(
      args: SelectSubset<T, responsibleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Responsible.
     * @param {responsibleUpsertArgs} args - Arguments to update or create a Responsible.
     * @example
     * // Update or create a Responsible
     * const responsible = await prisma.responsible.upsert({
     *   create: {
     *     // ... data to create a Responsible
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Responsible we want to update
     *   }
     * })
    **/
    upsert<T extends responsibleUpsertArgs>(
      args: SelectSubset<T, responsibleUpsertArgs>
    ): Prisma__responsibleClient<responsibleGetPayload<T>>

    /**
     * Count the number of Responsibles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {responsibleCountArgs} args - Arguments to filter Responsibles to count.
     * @example
     * // Count the number of Responsibles
     * const count = await prisma.responsible.count({
     *   where: {
     *     // ... the filter for the Responsibles we want to count
     *   }
     * })
    **/
    count<T extends responsibleCountArgs>(
      args?: Subset<T, responsibleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResponsibleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Responsible.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponsibleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResponsibleAggregateArgs>(args: Subset<T, ResponsibleAggregateArgs>): PrismaPromise<GetResponsibleAggregateType<T>>

    /**
     * Group by Responsible.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponsibleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResponsibleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResponsibleGroupByArgs['orderBy'] }
        : { orderBy?: ResponsibleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResponsibleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResponsibleGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for responsible.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__responsibleClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    task<T extends responsible$taskArgs= {}>(args?: Subset<T, responsible$taskArgs>): PrismaPromise<Array<taskGetPayload<T>>| Null>;

    taskReport<T extends responsible$taskReportArgs= {}>(args?: Subset<T, responsible$taskReportArgs>): PrismaPromise<Array<taskReportGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * responsible base type for findUnique actions
   */
  export type responsibleFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the responsible
     */
    select?: responsibleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: responsibleInclude | null
    /**
     * Filter, which responsible to fetch.
     */
    where: responsibleWhereUniqueInput
  }

  /**
   * responsible findUnique
   */
  export interface responsibleFindUniqueArgs extends responsibleFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * responsible findUniqueOrThrow
   */
  export type responsibleFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the responsible
     */
    select?: responsibleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: responsibleInclude | null
    /**
     * Filter, which responsible to fetch.
     */
    where: responsibleWhereUniqueInput
  }


  /**
   * responsible base type for findFirst actions
   */
  export type responsibleFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the responsible
     */
    select?: responsibleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: responsibleInclude | null
    /**
     * Filter, which responsible to fetch.
     */
    where?: responsibleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of responsibles to fetch.
     */
    orderBy?: Enumerable<responsibleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for responsibles.
     */
    cursor?: responsibleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` responsibles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` responsibles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of responsibles.
     */
    distinct?: Enumerable<ResponsibleScalarFieldEnum>
  }

  /**
   * responsible findFirst
   */
  export interface responsibleFindFirstArgs extends responsibleFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * responsible findFirstOrThrow
   */
  export type responsibleFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the responsible
     */
    select?: responsibleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: responsibleInclude | null
    /**
     * Filter, which responsible to fetch.
     */
    where?: responsibleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of responsibles to fetch.
     */
    orderBy?: Enumerable<responsibleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for responsibles.
     */
    cursor?: responsibleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` responsibles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` responsibles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of responsibles.
     */
    distinct?: Enumerable<ResponsibleScalarFieldEnum>
  }


  /**
   * responsible findMany
   */
  export type responsibleFindManyArgs = {
    /**
     * Select specific fields to fetch from the responsible
     */
    select?: responsibleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: responsibleInclude | null
    /**
     * Filter, which responsibles to fetch.
     */
    where?: responsibleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of responsibles to fetch.
     */
    orderBy?: Enumerable<responsibleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing responsibles.
     */
    cursor?: responsibleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` responsibles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` responsibles.
     */
    skip?: number
    distinct?: Enumerable<ResponsibleScalarFieldEnum>
  }


  /**
   * responsible create
   */
  export type responsibleCreateArgs = {
    /**
     * Select specific fields to fetch from the responsible
     */
    select?: responsibleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: responsibleInclude | null
    /**
     * The data needed to create a responsible.
     */
    data: XOR<responsibleCreateInput, responsibleUncheckedCreateInput>
  }


  /**
   * responsible createMany
   */
  export type responsibleCreateManyArgs = {
    /**
     * The data used to create many responsibles.
     */
    data: Enumerable<responsibleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * responsible update
   */
  export type responsibleUpdateArgs = {
    /**
     * Select specific fields to fetch from the responsible
     */
    select?: responsibleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: responsibleInclude | null
    /**
     * The data needed to update a responsible.
     */
    data: XOR<responsibleUpdateInput, responsibleUncheckedUpdateInput>
    /**
     * Choose, which responsible to update.
     */
    where: responsibleWhereUniqueInput
  }


  /**
   * responsible updateMany
   */
  export type responsibleUpdateManyArgs = {
    /**
     * The data used to update responsibles.
     */
    data: XOR<responsibleUpdateManyMutationInput, responsibleUncheckedUpdateManyInput>
    /**
     * Filter which responsibles to update
     */
    where?: responsibleWhereInput
  }


  /**
   * responsible upsert
   */
  export type responsibleUpsertArgs = {
    /**
     * Select specific fields to fetch from the responsible
     */
    select?: responsibleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: responsibleInclude | null
    /**
     * The filter to search for the responsible to update in case it exists.
     */
    where: responsibleWhereUniqueInput
    /**
     * In case the responsible found by the `where` argument doesn't exist, create a new responsible with this data.
     */
    create: XOR<responsibleCreateInput, responsibleUncheckedCreateInput>
    /**
     * In case the responsible was found with the provided `where` argument, update it with this data.
     */
    update: XOR<responsibleUpdateInput, responsibleUncheckedUpdateInput>
  }


  /**
   * responsible delete
   */
  export type responsibleDeleteArgs = {
    /**
     * Select specific fields to fetch from the responsible
     */
    select?: responsibleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: responsibleInclude | null
    /**
     * Filter which responsible to delete.
     */
    where: responsibleWhereUniqueInput
  }


  /**
   * responsible deleteMany
   */
  export type responsibleDeleteManyArgs = {
    /**
     * Filter which responsibles to delete
     */
    where?: responsibleWhereInput
  }


  /**
   * responsible.task
   */
  export type responsible$taskArgs = {
    /**
     * Select specific fields to fetch from the task
     */
    select?: taskSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: taskInclude | null
    where?: taskWhereInput
    orderBy?: Enumerable<taskOrderByWithRelationInput>
    cursor?: taskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TaskScalarFieldEnum>
  }


  /**
   * responsible.taskReport
   */
  export type responsible$taskReportArgs = {
    /**
     * Select specific fields to fetch from the taskReport
     */
    select?: taskReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: taskReportInclude | null
    where?: taskReportWhereInput
    orderBy?: Enumerable<taskReportOrderByWithRelationInput>
    cursor?: taskReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TaskReportScalarFieldEnum>
  }


  /**
   * responsible without action
   */
  export type responsibleArgs = {
    /**
     * Select specific fields to fetch from the responsible
     */
    select?: responsibleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: responsibleInclude | null
  }



  /**
   * Model task
   */


  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskAvgAggregateOutputType = {
    id: number | null
    responsibleId: number | null
  }

  export type TaskSumAggregateOutputType = {
    id: number | null
    responsibleId: number | null
  }

  export type TaskMinAggregateOutputType = {
    id: number | null
    responsibleId: number | null
    name: string | null
    description: string | null
    day: Date | null
    status: string | null
  }

  export type TaskMaxAggregateOutputType = {
    id: number | null
    responsibleId: number | null
    name: string | null
    description: string | null
    day: Date | null
    status: string | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    responsibleId: number
    name: number
    description: number
    day: number
    status: number
    _all: number
  }


  export type TaskAvgAggregateInputType = {
    id?: true
    responsibleId?: true
  }

  export type TaskSumAggregateInputType = {
    id?: true
    responsibleId?: true
  }

  export type TaskMinAggregateInputType = {
    id?: true
    responsibleId?: true
    name?: true
    description?: true
    day?: true
    status?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    responsibleId?: true
    name?: true
    description?: true
    day?: true
    status?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    responsibleId?: true
    name?: true
    description?: true
    day?: true
    status?: true
    _all?: true
  }

  export type TaskAggregateArgs = {
    /**
     * Filter which task to aggregate.
     */
    where?: taskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tasks to fetch.
     */
    orderBy?: Enumerable<taskOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: taskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs = {
    where?: taskWhereInput
    orderBy?: Enumerable<taskOrderByWithAggregationInput>
    by: TaskScalarFieldEnum[]
    having?: taskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _avg?: TaskAvgAggregateInputType
    _sum?: TaskSumAggregateInputType
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }


  export type TaskGroupByOutputType = {
    id: number
    responsibleId: number
    name: string
    description: string
    day: Date
    status: string
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type taskSelect = {
    id?: boolean
    responsibleId?: boolean
    name?: boolean
    description?: boolean
    day?: boolean
    status?: boolean
    responsible?: boolean | responsibleArgs
    taskReport?: boolean | task$taskReportArgs
    _count?: boolean | TaskCountOutputTypeArgs
  }


  export type taskInclude = {
    responsible?: boolean | responsibleArgs
    taskReport?: boolean | task$taskReportArgs
    _count?: boolean | TaskCountOutputTypeArgs
  }

  export type taskGetPayload<S extends boolean | null | undefined | taskArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? task :
    S extends undefined ? never :
    S extends { include: any } & (taskArgs | taskFindManyArgs)
    ? task  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'responsible' ? responsibleGetPayload<S['include'][P]> :
        P extends 'taskReport' ? Array < taskReportGetPayload<S['include'][P]>>  :
        P extends '_count' ? TaskCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (taskArgs | taskFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'responsible' ? responsibleGetPayload<S['select'][P]> :
        P extends 'taskReport' ? Array < taskReportGetPayload<S['select'][P]>>  :
        P extends '_count' ? TaskCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof task ? task[P] : never
  } 
      : task


  type taskCountArgs = 
    Omit<taskFindManyArgs, 'select' | 'include'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface taskDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Task that matches the filter.
     * @param {taskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends taskFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, taskFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'task'> extends True ? Prisma__taskClient<taskGetPayload<T>> : Prisma__taskClient<taskGetPayload<T> | null, null>

    /**
     * Find one Task that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {taskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends taskFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, taskFindUniqueOrThrowArgs>
    ): Prisma__taskClient<taskGetPayload<T>>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {taskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends taskFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, taskFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'task'> extends True ? Prisma__taskClient<taskGetPayload<T>> : Prisma__taskClient<taskGetPayload<T> | null, null>

    /**
     * Find the first Task that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {taskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends taskFindFirstOrThrowArgs>(
      args?: SelectSubset<T, taskFindFirstOrThrowArgs>
    ): Prisma__taskClient<taskGetPayload<T>>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {taskFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends taskFindManyArgs>(
      args?: SelectSubset<T, taskFindManyArgs>
    ): PrismaPromise<Array<taskGetPayload<T>>>

    /**
     * Create a Task.
     * @param {taskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
    **/
    create<T extends taskCreateArgs>(
      args: SelectSubset<T, taskCreateArgs>
    ): Prisma__taskClient<taskGetPayload<T>>

    /**
     * Create many Tasks.
     *     @param {taskCreateManyArgs} args - Arguments to create many Tasks.
     *     @example
     *     // Create many Tasks
     *     const task = await prisma.task.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends taskCreateManyArgs>(
      args?: SelectSubset<T, taskCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Task.
     * @param {taskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
    **/
    delete<T extends taskDeleteArgs>(
      args: SelectSubset<T, taskDeleteArgs>
    ): Prisma__taskClient<taskGetPayload<T>>

    /**
     * Update one Task.
     * @param {taskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends taskUpdateArgs>(
      args: SelectSubset<T, taskUpdateArgs>
    ): Prisma__taskClient<taskGetPayload<T>>

    /**
     * Delete zero or more Tasks.
     * @param {taskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends taskDeleteManyArgs>(
      args?: SelectSubset<T, taskDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {taskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends taskUpdateManyArgs>(
      args: SelectSubset<T, taskUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Task.
     * @param {taskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
    **/
    upsert<T extends taskUpsertArgs>(
      args: SelectSubset<T, taskUpsertArgs>
    ): Prisma__taskClient<taskGetPayload<T>>

    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {taskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends taskCountArgs>(
      args?: Subset<T, taskCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__taskClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    responsible<T extends responsibleArgs= {}>(args?: Subset<T, responsibleArgs>): Prisma__responsibleClient<responsibleGetPayload<T> | Null>;

    taskReport<T extends task$taskReportArgs= {}>(args?: Subset<T, task$taskReportArgs>): PrismaPromise<Array<taskReportGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * task base type for findUnique actions
   */
  export type taskFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the task
     */
    select?: taskSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: taskInclude | null
    /**
     * Filter, which task to fetch.
     */
    where: taskWhereUniqueInput
  }

  /**
   * task findUnique
   */
  export interface taskFindUniqueArgs extends taskFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * task findUniqueOrThrow
   */
  export type taskFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the task
     */
    select?: taskSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: taskInclude | null
    /**
     * Filter, which task to fetch.
     */
    where: taskWhereUniqueInput
  }


  /**
   * task base type for findFirst actions
   */
  export type taskFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the task
     */
    select?: taskSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: taskInclude | null
    /**
     * Filter, which task to fetch.
     */
    where?: taskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tasks to fetch.
     */
    orderBy?: Enumerable<taskOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tasks.
     */
    cursor?: taskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tasks.
     */
    distinct?: Enumerable<TaskScalarFieldEnum>
  }

  /**
   * task findFirst
   */
  export interface taskFindFirstArgs extends taskFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * task findFirstOrThrow
   */
  export type taskFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the task
     */
    select?: taskSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: taskInclude | null
    /**
     * Filter, which task to fetch.
     */
    where?: taskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tasks to fetch.
     */
    orderBy?: Enumerable<taskOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tasks.
     */
    cursor?: taskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tasks.
     */
    distinct?: Enumerable<TaskScalarFieldEnum>
  }


  /**
   * task findMany
   */
  export type taskFindManyArgs = {
    /**
     * Select specific fields to fetch from the task
     */
    select?: taskSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: taskInclude | null
    /**
     * Filter, which tasks to fetch.
     */
    where?: taskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tasks to fetch.
     */
    orderBy?: Enumerable<taskOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tasks.
     */
    cursor?: taskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tasks.
     */
    skip?: number
    distinct?: Enumerable<TaskScalarFieldEnum>
  }


  /**
   * task create
   */
  export type taskCreateArgs = {
    /**
     * Select specific fields to fetch from the task
     */
    select?: taskSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: taskInclude | null
    /**
     * The data needed to create a task.
     */
    data: XOR<taskCreateInput, taskUncheckedCreateInput>
  }


  /**
   * task createMany
   */
  export type taskCreateManyArgs = {
    /**
     * The data used to create many tasks.
     */
    data: Enumerable<taskCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * task update
   */
  export type taskUpdateArgs = {
    /**
     * Select specific fields to fetch from the task
     */
    select?: taskSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: taskInclude | null
    /**
     * The data needed to update a task.
     */
    data: XOR<taskUpdateInput, taskUncheckedUpdateInput>
    /**
     * Choose, which task to update.
     */
    where: taskWhereUniqueInput
  }


  /**
   * task updateMany
   */
  export type taskUpdateManyArgs = {
    /**
     * The data used to update tasks.
     */
    data: XOR<taskUpdateManyMutationInput, taskUncheckedUpdateManyInput>
    /**
     * Filter which tasks to update
     */
    where?: taskWhereInput
  }


  /**
   * task upsert
   */
  export type taskUpsertArgs = {
    /**
     * Select specific fields to fetch from the task
     */
    select?: taskSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: taskInclude | null
    /**
     * The filter to search for the task to update in case it exists.
     */
    where: taskWhereUniqueInput
    /**
     * In case the task found by the `where` argument doesn't exist, create a new task with this data.
     */
    create: XOR<taskCreateInput, taskUncheckedCreateInput>
    /**
     * In case the task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<taskUpdateInput, taskUncheckedUpdateInput>
  }


  /**
   * task delete
   */
  export type taskDeleteArgs = {
    /**
     * Select specific fields to fetch from the task
     */
    select?: taskSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: taskInclude | null
    /**
     * Filter which task to delete.
     */
    where: taskWhereUniqueInput
  }


  /**
   * task deleteMany
   */
  export type taskDeleteManyArgs = {
    /**
     * Filter which tasks to delete
     */
    where?: taskWhereInput
  }


  /**
   * task.taskReport
   */
  export type task$taskReportArgs = {
    /**
     * Select specific fields to fetch from the taskReport
     */
    select?: taskReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: taskReportInclude | null
    where?: taskReportWhereInput
    orderBy?: Enumerable<taskReportOrderByWithRelationInput>
    cursor?: taskReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TaskReportScalarFieldEnum>
  }


  /**
   * task without action
   */
  export type taskArgs = {
    /**
     * Select specific fields to fetch from the task
     */
    select?: taskSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: taskInclude | null
  }



  /**
   * Model taskReport
   */


  export type AggregateTaskReport = {
    _count: TaskReportCountAggregateOutputType | null
    _avg: TaskReportAvgAggregateOutputType | null
    _sum: TaskReportSumAggregateOutputType | null
    _min: TaskReportMinAggregateOutputType | null
    _max: TaskReportMaxAggregateOutputType | null
  }

  export type TaskReportAvgAggregateOutputType = {
    id: number | null
    taskId: number | null
    responsibleId: number | null
  }

  export type TaskReportSumAggregateOutputType = {
    id: number | null
    taskId: number | null
    responsibleId: number | null
  }

  export type TaskReportMinAggregateOutputType = {
    id: number | null
    description: string | null
    taskId: number | null
    responsibleId: number | null
  }

  export type TaskReportMaxAggregateOutputType = {
    id: number | null
    description: string | null
    taskId: number | null
    responsibleId: number | null
  }

  export type TaskReportCountAggregateOutputType = {
    id: number
    description: number
    taskId: number
    responsibleId: number
    _all: number
  }


  export type TaskReportAvgAggregateInputType = {
    id?: true
    taskId?: true
    responsibleId?: true
  }

  export type TaskReportSumAggregateInputType = {
    id?: true
    taskId?: true
    responsibleId?: true
  }

  export type TaskReportMinAggregateInputType = {
    id?: true
    description?: true
    taskId?: true
    responsibleId?: true
  }

  export type TaskReportMaxAggregateInputType = {
    id?: true
    description?: true
    taskId?: true
    responsibleId?: true
  }

  export type TaskReportCountAggregateInputType = {
    id?: true
    description?: true
    taskId?: true
    responsibleId?: true
    _all?: true
  }

  export type TaskReportAggregateArgs = {
    /**
     * Filter which taskReport to aggregate.
     */
    where?: taskReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of taskReports to fetch.
     */
    orderBy?: Enumerable<taskReportOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: taskReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` taskReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` taskReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned taskReports
    **/
    _count?: true | TaskReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskReportMaxAggregateInputType
  }

  export type GetTaskReportAggregateType<T extends TaskReportAggregateArgs> = {
        [P in keyof T & keyof AggregateTaskReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTaskReport[P]>
      : GetScalarType<T[P], AggregateTaskReport[P]>
  }




  export type TaskReportGroupByArgs = {
    where?: taskReportWhereInput
    orderBy?: Enumerable<taskReportOrderByWithAggregationInput>
    by: TaskReportScalarFieldEnum[]
    having?: taskReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskReportCountAggregateInputType | true
    _avg?: TaskReportAvgAggregateInputType
    _sum?: TaskReportSumAggregateInputType
    _min?: TaskReportMinAggregateInputType
    _max?: TaskReportMaxAggregateInputType
  }


  export type TaskReportGroupByOutputType = {
    id: number
    description: string
    taskId: number
    responsibleId: number
    _count: TaskReportCountAggregateOutputType | null
    _avg: TaskReportAvgAggregateOutputType | null
    _sum: TaskReportSumAggregateOutputType | null
    _min: TaskReportMinAggregateOutputType | null
    _max: TaskReportMaxAggregateOutputType | null
  }

  type GetTaskReportGroupByPayload<T extends TaskReportGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TaskReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskReportGroupByOutputType[P]>
            : GetScalarType<T[P], TaskReportGroupByOutputType[P]>
        }
      >
    >


  export type taskReportSelect = {
    id?: boolean
    description?: boolean
    taskId?: boolean
    responsibleId?: boolean
    task?: boolean | taskArgs
    responsible?: boolean | responsibleArgs
  }


  export type taskReportInclude = {
    task?: boolean | taskArgs
    responsible?: boolean | responsibleArgs
  }

  export type taskReportGetPayload<S extends boolean | null | undefined | taskReportArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? taskReport :
    S extends undefined ? never :
    S extends { include: any } & (taskReportArgs | taskReportFindManyArgs)
    ? taskReport  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'task' ? taskGetPayload<S['include'][P]> :
        P extends 'responsible' ? responsibleGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (taskReportArgs | taskReportFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'task' ? taskGetPayload<S['select'][P]> :
        P extends 'responsible' ? responsibleGetPayload<S['select'][P]> :  P extends keyof taskReport ? taskReport[P] : never
  } 
      : taskReport


  type taskReportCountArgs = 
    Omit<taskReportFindManyArgs, 'select' | 'include'> & {
      select?: TaskReportCountAggregateInputType | true
    }

  export interface taskReportDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TaskReport that matches the filter.
     * @param {taskReportFindUniqueArgs} args - Arguments to find a TaskReport
     * @example
     * // Get one TaskReport
     * const taskReport = await prisma.taskReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends taskReportFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, taskReportFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'taskReport'> extends True ? Prisma__taskReportClient<taskReportGetPayload<T>> : Prisma__taskReportClient<taskReportGetPayload<T> | null, null>

    /**
     * Find one TaskReport that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {taskReportFindUniqueOrThrowArgs} args - Arguments to find a TaskReport
     * @example
     * // Get one TaskReport
     * const taskReport = await prisma.taskReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends taskReportFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, taskReportFindUniqueOrThrowArgs>
    ): Prisma__taskReportClient<taskReportGetPayload<T>>

    /**
     * Find the first TaskReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {taskReportFindFirstArgs} args - Arguments to find a TaskReport
     * @example
     * // Get one TaskReport
     * const taskReport = await prisma.taskReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends taskReportFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, taskReportFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'taskReport'> extends True ? Prisma__taskReportClient<taskReportGetPayload<T>> : Prisma__taskReportClient<taskReportGetPayload<T> | null, null>

    /**
     * Find the first TaskReport that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {taskReportFindFirstOrThrowArgs} args - Arguments to find a TaskReport
     * @example
     * // Get one TaskReport
     * const taskReport = await prisma.taskReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends taskReportFindFirstOrThrowArgs>(
      args?: SelectSubset<T, taskReportFindFirstOrThrowArgs>
    ): Prisma__taskReportClient<taskReportGetPayload<T>>

    /**
     * Find zero or more TaskReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {taskReportFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TaskReports
     * const taskReports = await prisma.taskReport.findMany()
     * 
     * // Get first 10 TaskReports
     * const taskReports = await prisma.taskReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskReportWithIdOnly = await prisma.taskReport.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends taskReportFindManyArgs>(
      args?: SelectSubset<T, taskReportFindManyArgs>
    ): PrismaPromise<Array<taskReportGetPayload<T>>>

    /**
     * Create a TaskReport.
     * @param {taskReportCreateArgs} args - Arguments to create a TaskReport.
     * @example
     * // Create one TaskReport
     * const TaskReport = await prisma.taskReport.create({
     *   data: {
     *     // ... data to create a TaskReport
     *   }
     * })
     * 
    **/
    create<T extends taskReportCreateArgs>(
      args: SelectSubset<T, taskReportCreateArgs>
    ): Prisma__taskReportClient<taskReportGetPayload<T>>

    /**
     * Create many TaskReports.
     *     @param {taskReportCreateManyArgs} args - Arguments to create many TaskReports.
     *     @example
     *     // Create many TaskReports
     *     const taskReport = await prisma.taskReport.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends taskReportCreateManyArgs>(
      args?: SelectSubset<T, taskReportCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a TaskReport.
     * @param {taskReportDeleteArgs} args - Arguments to delete one TaskReport.
     * @example
     * // Delete one TaskReport
     * const TaskReport = await prisma.taskReport.delete({
     *   where: {
     *     // ... filter to delete one TaskReport
     *   }
     * })
     * 
    **/
    delete<T extends taskReportDeleteArgs>(
      args: SelectSubset<T, taskReportDeleteArgs>
    ): Prisma__taskReportClient<taskReportGetPayload<T>>

    /**
     * Update one TaskReport.
     * @param {taskReportUpdateArgs} args - Arguments to update one TaskReport.
     * @example
     * // Update one TaskReport
     * const taskReport = await prisma.taskReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends taskReportUpdateArgs>(
      args: SelectSubset<T, taskReportUpdateArgs>
    ): Prisma__taskReportClient<taskReportGetPayload<T>>

    /**
     * Delete zero or more TaskReports.
     * @param {taskReportDeleteManyArgs} args - Arguments to filter TaskReports to delete.
     * @example
     * // Delete a few TaskReports
     * const { count } = await prisma.taskReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends taskReportDeleteManyArgs>(
      args?: SelectSubset<T, taskReportDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaskReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {taskReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TaskReports
     * const taskReport = await prisma.taskReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends taskReportUpdateManyArgs>(
      args: SelectSubset<T, taskReportUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one TaskReport.
     * @param {taskReportUpsertArgs} args - Arguments to update or create a TaskReport.
     * @example
     * // Update or create a TaskReport
     * const taskReport = await prisma.taskReport.upsert({
     *   create: {
     *     // ... data to create a TaskReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TaskReport we want to update
     *   }
     * })
    **/
    upsert<T extends taskReportUpsertArgs>(
      args: SelectSubset<T, taskReportUpsertArgs>
    ): Prisma__taskReportClient<taskReportGetPayload<T>>

    /**
     * Count the number of TaskReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {taskReportCountArgs} args - Arguments to filter TaskReports to count.
     * @example
     * // Count the number of TaskReports
     * const count = await prisma.taskReport.count({
     *   where: {
     *     // ... the filter for the TaskReports we want to count
     *   }
     * })
    **/
    count<T extends taskReportCountArgs>(
      args?: Subset<T, taskReportCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TaskReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskReportAggregateArgs>(args: Subset<T, TaskReportAggregateArgs>): PrismaPromise<GetTaskReportAggregateType<T>>

    /**
     * Group by TaskReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskReportGroupByArgs['orderBy'] }
        : { orderBy?: TaskReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskReportGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for taskReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__taskReportClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    task<T extends taskArgs= {}>(args?: Subset<T, taskArgs>): Prisma__taskClient<taskGetPayload<T> | Null>;

    responsible<T extends responsibleArgs= {}>(args?: Subset<T, responsibleArgs>): Prisma__responsibleClient<responsibleGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * taskReport base type for findUnique actions
   */
  export type taskReportFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the taskReport
     */
    select?: taskReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: taskReportInclude | null
    /**
     * Filter, which taskReport to fetch.
     */
    where: taskReportWhereUniqueInput
  }

  /**
   * taskReport findUnique
   */
  export interface taskReportFindUniqueArgs extends taskReportFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * taskReport findUniqueOrThrow
   */
  export type taskReportFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the taskReport
     */
    select?: taskReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: taskReportInclude | null
    /**
     * Filter, which taskReport to fetch.
     */
    where: taskReportWhereUniqueInput
  }


  /**
   * taskReport base type for findFirst actions
   */
  export type taskReportFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the taskReport
     */
    select?: taskReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: taskReportInclude | null
    /**
     * Filter, which taskReport to fetch.
     */
    where?: taskReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of taskReports to fetch.
     */
    orderBy?: Enumerable<taskReportOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for taskReports.
     */
    cursor?: taskReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` taskReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` taskReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of taskReports.
     */
    distinct?: Enumerable<TaskReportScalarFieldEnum>
  }

  /**
   * taskReport findFirst
   */
  export interface taskReportFindFirstArgs extends taskReportFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * taskReport findFirstOrThrow
   */
  export type taskReportFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the taskReport
     */
    select?: taskReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: taskReportInclude | null
    /**
     * Filter, which taskReport to fetch.
     */
    where?: taskReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of taskReports to fetch.
     */
    orderBy?: Enumerable<taskReportOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for taskReports.
     */
    cursor?: taskReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` taskReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` taskReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of taskReports.
     */
    distinct?: Enumerable<TaskReportScalarFieldEnum>
  }


  /**
   * taskReport findMany
   */
  export type taskReportFindManyArgs = {
    /**
     * Select specific fields to fetch from the taskReport
     */
    select?: taskReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: taskReportInclude | null
    /**
     * Filter, which taskReports to fetch.
     */
    where?: taskReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of taskReports to fetch.
     */
    orderBy?: Enumerable<taskReportOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing taskReports.
     */
    cursor?: taskReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` taskReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` taskReports.
     */
    skip?: number
    distinct?: Enumerable<TaskReportScalarFieldEnum>
  }


  /**
   * taskReport create
   */
  export type taskReportCreateArgs = {
    /**
     * Select specific fields to fetch from the taskReport
     */
    select?: taskReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: taskReportInclude | null
    /**
     * The data needed to create a taskReport.
     */
    data: XOR<taskReportCreateInput, taskReportUncheckedCreateInput>
  }


  /**
   * taskReport createMany
   */
  export type taskReportCreateManyArgs = {
    /**
     * The data used to create many taskReports.
     */
    data: Enumerable<taskReportCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * taskReport update
   */
  export type taskReportUpdateArgs = {
    /**
     * Select specific fields to fetch from the taskReport
     */
    select?: taskReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: taskReportInclude | null
    /**
     * The data needed to update a taskReport.
     */
    data: XOR<taskReportUpdateInput, taskReportUncheckedUpdateInput>
    /**
     * Choose, which taskReport to update.
     */
    where: taskReportWhereUniqueInput
  }


  /**
   * taskReport updateMany
   */
  export type taskReportUpdateManyArgs = {
    /**
     * The data used to update taskReports.
     */
    data: XOR<taskReportUpdateManyMutationInput, taskReportUncheckedUpdateManyInput>
    /**
     * Filter which taskReports to update
     */
    where?: taskReportWhereInput
  }


  /**
   * taskReport upsert
   */
  export type taskReportUpsertArgs = {
    /**
     * Select specific fields to fetch from the taskReport
     */
    select?: taskReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: taskReportInclude | null
    /**
     * The filter to search for the taskReport to update in case it exists.
     */
    where: taskReportWhereUniqueInput
    /**
     * In case the taskReport found by the `where` argument doesn't exist, create a new taskReport with this data.
     */
    create: XOR<taskReportCreateInput, taskReportUncheckedCreateInput>
    /**
     * In case the taskReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<taskReportUpdateInput, taskReportUncheckedUpdateInput>
  }


  /**
   * taskReport delete
   */
  export type taskReportDeleteArgs = {
    /**
     * Select specific fields to fetch from the taskReport
     */
    select?: taskReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: taskReportInclude | null
    /**
     * Filter which taskReport to delete.
     */
    where: taskReportWhereUniqueInput
  }


  /**
   * taskReport deleteMany
   */
  export type taskReportDeleteManyArgs = {
    /**
     * Filter which taskReports to delete
     */
    where?: taskReportWhereInput
  }


  /**
   * taskReport without action
   */
  export type taskReportArgs = {
    /**
     * Select specific fields to fetch from the taskReport
     */
    select?: taskReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: taskReportInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const ResponsibleScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ResponsibleScalarFieldEnum = (typeof ResponsibleScalarFieldEnum)[keyof typeof ResponsibleScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TaskReportScalarFieldEnum: {
    id: 'id',
    description: 'description',
    taskId: 'taskId',
    responsibleId: 'responsibleId'
  };

  export type TaskReportScalarFieldEnum = (typeof TaskReportScalarFieldEnum)[keyof typeof TaskReportScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    responsibleId: 'responsibleId',
    name: 'name',
    description: 'description',
    day: 'day',
    status: 'status'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type responsibleWhereInput = {
    AND?: Enumerable<responsibleWhereInput>
    OR?: Enumerable<responsibleWhereInput>
    NOT?: Enumerable<responsibleWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    task?: TaskListRelationFilter
    taskReport?: TaskReportListRelationFilter
  }

  export type responsibleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    task?: taskOrderByRelationAggregateInput
    taskReport?: taskReportOrderByRelationAggregateInput
  }

  export type responsibleWhereUniqueInput = {
    id?: number
  }

  export type responsibleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: responsibleCountOrderByAggregateInput
    _avg?: responsibleAvgOrderByAggregateInput
    _max?: responsibleMaxOrderByAggregateInput
    _min?: responsibleMinOrderByAggregateInput
    _sum?: responsibleSumOrderByAggregateInput
  }

  export type responsibleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<responsibleScalarWhereWithAggregatesInput>
    OR?: Enumerable<responsibleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<responsibleScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type taskWhereInput = {
    AND?: Enumerable<taskWhereInput>
    OR?: Enumerable<taskWhereInput>
    NOT?: Enumerable<taskWhereInput>
    id?: IntFilter | number
    responsibleId?: IntFilter | number
    name?: StringFilter | string
    description?: StringFilter | string
    day?: DateTimeFilter | Date | string
    status?: StringFilter | string
    responsible?: XOR<ResponsibleRelationFilter, responsibleWhereInput>
    taskReport?: TaskReportListRelationFilter
  }

  export type taskOrderByWithRelationInput = {
    id?: SortOrder
    responsibleId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    day?: SortOrder
    status?: SortOrder
    responsible?: responsibleOrderByWithRelationInput
    taskReport?: taskReportOrderByRelationAggregateInput
  }

  export type taskWhereUniqueInput = {
    id?: number
  }

  export type taskOrderByWithAggregationInput = {
    id?: SortOrder
    responsibleId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    day?: SortOrder
    status?: SortOrder
    _count?: taskCountOrderByAggregateInput
    _avg?: taskAvgOrderByAggregateInput
    _max?: taskMaxOrderByAggregateInput
    _min?: taskMinOrderByAggregateInput
    _sum?: taskSumOrderByAggregateInput
  }

  export type taskScalarWhereWithAggregatesInput = {
    AND?: Enumerable<taskScalarWhereWithAggregatesInput>
    OR?: Enumerable<taskScalarWhereWithAggregatesInput>
    NOT?: Enumerable<taskScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    responsibleId?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    day?: DateTimeWithAggregatesFilter | Date | string
    status?: StringWithAggregatesFilter | string
  }

  export type taskReportWhereInput = {
    AND?: Enumerable<taskReportWhereInput>
    OR?: Enumerable<taskReportWhereInput>
    NOT?: Enumerable<taskReportWhereInput>
    id?: IntFilter | number
    description?: StringFilter | string
    taskId?: IntFilter | number
    responsibleId?: IntFilter | number
    task?: XOR<TaskRelationFilter, taskWhereInput>
    responsible?: XOR<ResponsibleRelationFilter, responsibleWhereInput>
  }

  export type taskReportOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    taskId?: SortOrder
    responsibleId?: SortOrder
    task?: taskOrderByWithRelationInput
    responsible?: responsibleOrderByWithRelationInput
  }

  export type taskReportWhereUniqueInput = {
    id?: number
  }

  export type taskReportOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    taskId?: SortOrder
    responsibleId?: SortOrder
    _count?: taskReportCountOrderByAggregateInput
    _avg?: taskReportAvgOrderByAggregateInput
    _max?: taskReportMaxOrderByAggregateInput
    _min?: taskReportMinOrderByAggregateInput
    _sum?: taskReportSumOrderByAggregateInput
  }

  export type taskReportScalarWhereWithAggregatesInput = {
    AND?: Enumerable<taskReportScalarWhereWithAggregatesInput>
    OR?: Enumerable<taskReportScalarWhereWithAggregatesInput>
    NOT?: Enumerable<taskReportScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    description?: StringWithAggregatesFilter | string
    taskId?: IntWithAggregatesFilter | number
    responsibleId?: IntWithAggregatesFilter | number
  }

  export type responsibleCreateInput = {
    name: string
    task?: taskCreateNestedManyWithoutResponsibleInput
    taskReport?: taskReportCreateNestedManyWithoutResponsibleInput
  }

  export type responsibleUncheckedCreateInput = {
    id?: number
    name: string
    task?: taskUncheckedCreateNestedManyWithoutResponsibleInput
    taskReport?: taskReportUncheckedCreateNestedManyWithoutResponsibleInput
  }

  export type responsibleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    task?: taskUpdateManyWithoutResponsibleNestedInput
    taskReport?: taskReportUpdateManyWithoutResponsibleNestedInput
  }

  export type responsibleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    task?: taskUncheckedUpdateManyWithoutResponsibleNestedInput
    taskReport?: taskReportUncheckedUpdateManyWithoutResponsibleNestedInput
  }

  export type responsibleCreateManyInput = {
    id?: number
    name: string
  }

  export type responsibleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type responsibleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type taskCreateInput = {
    name: string
    description: string
    day: Date | string
    status: string
    responsible: responsibleCreateNestedOneWithoutTaskInput
    taskReport?: taskReportCreateNestedManyWithoutTaskInput
  }

  export type taskUncheckedCreateInput = {
    id?: number
    responsibleId: number
    name: string
    description: string
    day: Date | string
    status: string
    taskReport?: taskReportUncheckedCreateNestedManyWithoutTaskInput
  }

  export type taskUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    day?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    responsible?: responsibleUpdateOneRequiredWithoutTaskNestedInput
    taskReport?: taskReportUpdateManyWithoutTaskNestedInput
  }

  export type taskUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    responsibleId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    day?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    taskReport?: taskReportUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type taskCreateManyInput = {
    id?: number
    responsibleId: number
    name: string
    description: string
    day: Date | string
    status: string
  }

  export type taskUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    day?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type taskUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    responsibleId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    day?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type taskReportCreateInput = {
    description: string
    task: taskCreateNestedOneWithoutTaskReportInput
    responsible: responsibleCreateNestedOneWithoutTaskReportInput
  }

  export type taskReportUncheckedCreateInput = {
    id?: number
    description: string
    taskId: number
    responsibleId: number
  }

  export type taskReportUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    task?: taskUpdateOneRequiredWithoutTaskReportNestedInput
    responsible?: responsibleUpdateOneRequiredWithoutTaskReportNestedInput
  }

  export type taskReportUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    taskId?: IntFieldUpdateOperationsInput | number
    responsibleId?: IntFieldUpdateOperationsInput | number
  }

  export type taskReportCreateManyInput = {
    id?: number
    description: string
    taskId: number
    responsibleId: number
  }

  export type taskReportUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
  }

  export type taskReportUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    taskId?: IntFieldUpdateOperationsInput | number
    responsibleId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type TaskListRelationFilter = {
    every?: taskWhereInput
    some?: taskWhereInput
    none?: taskWhereInput
  }

  export type TaskReportListRelationFilter = {
    every?: taskReportWhereInput
    some?: taskReportWhereInput
    none?: taskReportWhereInput
  }

  export type taskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type taskReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type responsibleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type responsibleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type responsibleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type responsibleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type responsibleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type ResponsibleRelationFilter = {
    is?: responsibleWhereInput
    isNot?: responsibleWhereInput
  }

  export type taskCountOrderByAggregateInput = {
    id?: SortOrder
    responsibleId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    day?: SortOrder
    status?: SortOrder
  }

  export type taskAvgOrderByAggregateInput = {
    id?: SortOrder
    responsibleId?: SortOrder
  }

  export type taskMaxOrderByAggregateInput = {
    id?: SortOrder
    responsibleId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    day?: SortOrder
    status?: SortOrder
  }

  export type taskMinOrderByAggregateInput = {
    id?: SortOrder
    responsibleId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    day?: SortOrder
    status?: SortOrder
  }

  export type taskSumOrderByAggregateInput = {
    id?: SortOrder
    responsibleId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type TaskRelationFilter = {
    is?: taskWhereInput
    isNot?: taskWhereInput
  }

  export type taskReportCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    taskId?: SortOrder
    responsibleId?: SortOrder
  }

  export type taskReportAvgOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    responsibleId?: SortOrder
  }

  export type taskReportMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    taskId?: SortOrder
    responsibleId?: SortOrder
  }

  export type taskReportMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    taskId?: SortOrder
    responsibleId?: SortOrder
  }

  export type taskReportSumOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    responsibleId?: SortOrder
  }

  export type taskCreateNestedManyWithoutResponsibleInput = {
    create?: XOR<Enumerable<taskCreateWithoutResponsibleInput>, Enumerable<taskUncheckedCreateWithoutResponsibleInput>>
    connectOrCreate?: Enumerable<taskCreateOrConnectWithoutResponsibleInput>
    createMany?: taskCreateManyResponsibleInputEnvelope
    connect?: Enumerable<taskWhereUniqueInput>
  }

  export type taskReportCreateNestedManyWithoutResponsibleInput = {
    create?: XOR<Enumerable<taskReportCreateWithoutResponsibleInput>, Enumerable<taskReportUncheckedCreateWithoutResponsibleInput>>
    connectOrCreate?: Enumerable<taskReportCreateOrConnectWithoutResponsibleInput>
    createMany?: taskReportCreateManyResponsibleInputEnvelope
    connect?: Enumerable<taskReportWhereUniqueInput>
  }

  export type taskUncheckedCreateNestedManyWithoutResponsibleInput = {
    create?: XOR<Enumerable<taskCreateWithoutResponsibleInput>, Enumerable<taskUncheckedCreateWithoutResponsibleInput>>
    connectOrCreate?: Enumerable<taskCreateOrConnectWithoutResponsibleInput>
    createMany?: taskCreateManyResponsibleInputEnvelope
    connect?: Enumerable<taskWhereUniqueInput>
  }

  export type taskReportUncheckedCreateNestedManyWithoutResponsibleInput = {
    create?: XOR<Enumerable<taskReportCreateWithoutResponsibleInput>, Enumerable<taskReportUncheckedCreateWithoutResponsibleInput>>
    connectOrCreate?: Enumerable<taskReportCreateOrConnectWithoutResponsibleInput>
    createMany?: taskReportCreateManyResponsibleInputEnvelope
    connect?: Enumerable<taskReportWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type taskUpdateManyWithoutResponsibleNestedInput = {
    create?: XOR<Enumerable<taskCreateWithoutResponsibleInput>, Enumerable<taskUncheckedCreateWithoutResponsibleInput>>
    connectOrCreate?: Enumerable<taskCreateOrConnectWithoutResponsibleInput>
    upsert?: Enumerable<taskUpsertWithWhereUniqueWithoutResponsibleInput>
    createMany?: taskCreateManyResponsibleInputEnvelope
    set?: Enumerable<taskWhereUniqueInput>
    disconnect?: Enumerable<taskWhereUniqueInput>
    delete?: Enumerable<taskWhereUniqueInput>
    connect?: Enumerable<taskWhereUniqueInput>
    update?: Enumerable<taskUpdateWithWhereUniqueWithoutResponsibleInput>
    updateMany?: Enumerable<taskUpdateManyWithWhereWithoutResponsibleInput>
    deleteMany?: Enumerable<taskScalarWhereInput>
  }

  export type taskReportUpdateManyWithoutResponsibleNestedInput = {
    create?: XOR<Enumerable<taskReportCreateWithoutResponsibleInput>, Enumerable<taskReportUncheckedCreateWithoutResponsibleInput>>
    connectOrCreate?: Enumerable<taskReportCreateOrConnectWithoutResponsibleInput>
    upsert?: Enumerable<taskReportUpsertWithWhereUniqueWithoutResponsibleInput>
    createMany?: taskReportCreateManyResponsibleInputEnvelope
    set?: Enumerable<taskReportWhereUniqueInput>
    disconnect?: Enumerable<taskReportWhereUniqueInput>
    delete?: Enumerable<taskReportWhereUniqueInput>
    connect?: Enumerable<taskReportWhereUniqueInput>
    update?: Enumerable<taskReportUpdateWithWhereUniqueWithoutResponsibleInput>
    updateMany?: Enumerable<taskReportUpdateManyWithWhereWithoutResponsibleInput>
    deleteMany?: Enumerable<taskReportScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type taskUncheckedUpdateManyWithoutResponsibleNestedInput = {
    create?: XOR<Enumerable<taskCreateWithoutResponsibleInput>, Enumerable<taskUncheckedCreateWithoutResponsibleInput>>
    connectOrCreate?: Enumerable<taskCreateOrConnectWithoutResponsibleInput>
    upsert?: Enumerable<taskUpsertWithWhereUniqueWithoutResponsibleInput>
    createMany?: taskCreateManyResponsibleInputEnvelope
    set?: Enumerable<taskWhereUniqueInput>
    disconnect?: Enumerable<taskWhereUniqueInput>
    delete?: Enumerable<taskWhereUniqueInput>
    connect?: Enumerable<taskWhereUniqueInput>
    update?: Enumerable<taskUpdateWithWhereUniqueWithoutResponsibleInput>
    updateMany?: Enumerable<taskUpdateManyWithWhereWithoutResponsibleInput>
    deleteMany?: Enumerable<taskScalarWhereInput>
  }

  export type taskReportUncheckedUpdateManyWithoutResponsibleNestedInput = {
    create?: XOR<Enumerable<taskReportCreateWithoutResponsibleInput>, Enumerable<taskReportUncheckedCreateWithoutResponsibleInput>>
    connectOrCreate?: Enumerable<taskReportCreateOrConnectWithoutResponsibleInput>
    upsert?: Enumerable<taskReportUpsertWithWhereUniqueWithoutResponsibleInput>
    createMany?: taskReportCreateManyResponsibleInputEnvelope
    set?: Enumerable<taskReportWhereUniqueInput>
    disconnect?: Enumerable<taskReportWhereUniqueInput>
    delete?: Enumerable<taskReportWhereUniqueInput>
    connect?: Enumerable<taskReportWhereUniqueInput>
    update?: Enumerable<taskReportUpdateWithWhereUniqueWithoutResponsibleInput>
    updateMany?: Enumerable<taskReportUpdateManyWithWhereWithoutResponsibleInput>
    deleteMany?: Enumerable<taskReportScalarWhereInput>
  }

  export type responsibleCreateNestedOneWithoutTaskInput = {
    create?: XOR<responsibleCreateWithoutTaskInput, responsibleUncheckedCreateWithoutTaskInput>
    connectOrCreate?: responsibleCreateOrConnectWithoutTaskInput
    connect?: responsibleWhereUniqueInput
  }

  export type taskReportCreateNestedManyWithoutTaskInput = {
    create?: XOR<Enumerable<taskReportCreateWithoutTaskInput>, Enumerable<taskReportUncheckedCreateWithoutTaskInput>>
    connectOrCreate?: Enumerable<taskReportCreateOrConnectWithoutTaskInput>
    createMany?: taskReportCreateManyTaskInputEnvelope
    connect?: Enumerable<taskReportWhereUniqueInput>
  }

  export type taskReportUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<Enumerable<taskReportCreateWithoutTaskInput>, Enumerable<taskReportUncheckedCreateWithoutTaskInput>>
    connectOrCreate?: Enumerable<taskReportCreateOrConnectWithoutTaskInput>
    createMany?: taskReportCreateManyTaskInputEnvelope
    connect?: Enumerable<taskReportWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type responsibleUpdateOneRequiredWithoutTaskNestedInput = {
    create?: XOR<responsibleCreateWithoutTaskInput, responsibleUncheckedCreateWithoutTaskInput>
    connectOrCreate?: responsibleCreateOrConnectWithoutTaskInput
    upsert?: responsibleUpsertWithoutTaskInput
    connect?: responsibleWhereUniqueInput
    update?: XOR<responsibleUpdateWithoutTaskInput, responsibleUncheckedUpdateWithoutTaskInput>
  }

  export type taskReportUpdateManyWithoutTaskNestedInput = {
    create?: XOR<Enumerable<taskReportCreateWithoutTaskInput>, Enumerable<taskReportUncheckedCreateWithoutTaskInput>>
    connectOrCreate?: Enumerable<taskReportCreateOrConnectWithoutTaskInput>
    upsert?: Enumerable<taskReportUpsertWithWhereUniqueWithoutTaskInput>
    createMany?: taskReportCreateManyTaskInputEnvelope
    set?: Enumerable<taskReportWhereUniqueInput>
    disconnect?: Enumerable<taskReportWhereUniqueInput>
    delete?: Enumerable<taskReportWhereUniqueInput>
    connect?: Enumerable<taskReportWhereUniqueInput>
    update?: Enumerable<taskReportUpdateWithWhereUniqueWithoutTaskInput>
    updateMany?: Enumerable<taskReportUpdateManyWithWhereWithoutTaskInput>
    deleteMany?: Enumerable<taskReportScalarWhereInput>
  }

  export type taskReportUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<Enumerable<taskReportCreateWithoutTaskInput>, Enumerable<taskReportUncheckedCreateWithoutTaskInput>>
    connectOrCreate?: Enumerable<taskReportCreateOrConnectWithoutTaskInput>
    upsert?: Enumerable<taskReportUpsertWithWhereUniqueWithoutTaskInput>
    createMany?: taskReportCreateManyTaskInputEnvelope
    set?: Enumerable<taskReportWhereUniqueInput>
    disconnect?: Enumerable<taskReportWhereUniqueInput>
    delete?: Enumerable<taskReportWhereUniqueInput>
    connect?: Enumerable<taskReportWhereUniqueInput>
    update?: Enumerable<taskReportUpdateWithWhereUniqueWithoutTaskInput>
    updateMany?: Enumerable<taskReportUpdateManyWithWhereWithoutTaskInput>
    deleteMany?: Enumerable<taskReportScalarWhereInput>
  }

  export type taskCreateNestedOneWithoutTaskReportInput = {
    create?: XOR<taskCreateWithoutTaskReportInput, taskUncheckedCreateWithoutTaskReportInput>
    connectOrCreate?: taskCreateOrConnectWithoutTaskReportInput
    connect?: taskWhereUniqueInput
  }

  export type responsibleCreateNestedOneWithoutTaskReportInput = {
    create?: XOR<responsibleCreateWithoutTaskReportInput, responsibleUncheckedCreateWithoutTaskReportInput>
    connectOrCreate?: responsibleCreateOrConnectWithoutTaskReportInput
    connect?: responsibleWhereUniqueInput
  }

  export type taskUpdateOneRequiredWithoutTaskReportNestedInput = {
    create?: XOR<taskCreateWithoutTaskReportInput, taskUncheckedCreateWithoutTaskReportInput>
    connectOrCreate?: taskCreateOrConnectWithoutTaskReportInput
    upsert?: taskUpsertWithoutTaskReportInput
    connect?: taskWhereUniqueInput
    update?: XOR<taskUpdateWithoutTaskReportInput, taskUncheckedUpdateWithoutTaskReportInput>
  }

  export type responsibleUpdateOneRequiredWithoutTaskReportNestedInput = {
    create?: XOR<responsibleCreateWithoutTaskReportInput, responsibleUncheckedCreateWithoutTaskReportInput>
    connectOrCreate?: responsibleCreateOrConnectWithoutTaskReportInput
    upsert?: responsibleUpsertWithoutTaskReportInput
    connect?: responsibleWhereUniqueInput
    update?: XOR<responsibleUpdateWithoutTaskReportInput, responsibleUncheckedUpdateWithoutTaskReportInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type taskCreateWithoutResponsibleInput = {
    name: string
    description: string
    day: Date | string
    status: string
    taskReport?: taskReportCreateNestedManyWithoutTaskInput
  }

  export type taskUncheckedCreateWithoutResponsibleInput = {
    id?: number
    name: string
    description: string
    day: Date | string
    status: string
    taskReport?: taskReportUncheckedCreateNestedManyWithoutTaskInput
  }

  export type taskCreateOrConnectWithoutResponsibleInput = {
    where: taskWhereUniqueInput
    create: XOR<taskCreateWithoutResponsibleInput, taskUncheckedCreateWithoutResponsibleInput>
  }

  export type taskCreateManyResponsibleInputEnvelope = {
    data: Enumerable<taskCreateManyResponsibleInput>
    skipDuplicates?: boolean
  }

  export type taskReportCreateWithoutResponsibleInput = {
    description: string
    task: taskCreateNestedOneWithoutTaskReportInput
  }

  export type taskReportUncheckedCreateWithoutResponsibleInput = {
    id?: number
    description: string
    taskId: number
  }

  export type taskReportCreateOrConnectWithoutResponsibleInput = {
    where: taskReportWhereUniqueInput
    create: XOR<taskReportCreateWithoutResponsibleInput, taskReportUncheckedCreateWithoutResponsibleInput>
  }

  export type taskReportCreateManyResponsibleInputEnvelope = {
    data: Enumerable<taskReportCreateManyResponsibleInput>
    skipDuplicates?: boolean
  }

  export type taskUpsertWithWhereUniqueWithoutResponsibleInput = {
    where: taskWhereUniqueInput
    update: XOR<taskUpdateWithoutResponsibleInput, taskUncheckedUpdateWithoutResponsibleInput>
    create: XOR<taskCreateWithoutResponsibleInput, taskUncheckedCreateWithoutResponsibleInput>
  }

  export type taskUpdateWithWhereUniqueWithoutResponsibleInput = {
    where: taskWhereUniqueInput
    data: XOR<taskUpdateWithoutResponsibleInput, taskUncheckedUpdateWithoutResponsibleInput>
  }

  export type taskUpdateManyWithWhereWithoutResponsibleInput = {
    where: taskScalarWhereInput
    data: XOR<taskUpdateManyMutationInput, taskUncheckedUpdateManyWithoutTaskInput>
  }

  export type taskScalarWhereInput = {
    AND?: Enumerable<taskScalarWhereInput>
    OR?: Enumerable<taskScalarWhereInput>
    NOT?: Enumerable<taskScalarWhereInput>
    id?: IntFilter | number
    responsibleId?: IntFilter | number
    name?: StringFilter | string
    description?: StringFilter | string
    day?: DateTimeFilter | Date | string
    status?: StringFilter | string
  }

  export type taskReportUpsertWithWhereUniqueWithoutResponsibleInput = {
    where: taskReportWhereUniqueInput
    update: XOR<taskReportUpdateWithoutResponsibleInput, taskReportUncheckedUpdateWithoutResponsibleInput>
    create: XOR<taskReportCreateWithoutResponsibleInput, taskReportUncheckedCreateWithoutResponsibleInput>
  }

  export type taskReportUpdateWithWhereUniqueWithoutResponsibleInput = {
    where: taskReportWhereUniqueInput
    data: XOR<taskReportUpdateWithoutResponsibleInput, taskReportUncheckedUpdateWithoutResponsibleInput>
  }

  export type taskReportUpdateManyWithWhereWithoutResponsibleInput = {
    where: taskReportScalarWhereInput
    data: XOR<taskReportUpdateManyMutationInput, taskReportUncheckedUpdateManyWithoutTaskReportInput>
  }

  export type taskReportScalarWhereInput = {
    AND?: Enumerable<taskReportScalarWhereInput>
    OR?: Enumerable<taskReportScalarWhereInput>
    NOT?: Enumerable<taskReportScalarWhereInput>
    id?: IntFilter | number
    description?: StringFilter | string
    taskId?: IntFilter | number
    responsibleId?: IntFilter | number
  }

  export type responsibleCreateWithoutTaskInput = {
    name: string
    taskReport?: taskReportCreateNestedManyWithoutResponsibleInput
  }

  export type responsibleUncheckedCreateWithoutTaskInput = {
    id?: number
    name: string
    taskReport?: taskReportUncheckedCreateNestedManyWithoutResponsibleInput
  }

  export type responsibleCreateOrConnectWithoutTaskInput = {
    where: responsibleWhereUniqueInput
    create: XOR<responsibleCreateWithoutTaskInput, responsibleUncheckedCreateWithoutTaskInput>
  }

  export type taskReportCreateWithoutTaskInput = {
    description: string
    responsible: responsibleCreateNestedOneWithoutTaskReportInput
  }

  export type taskReportUncheckedCreateWithoutTaskInput = {
    id?: number
    description: string
    responsibleId: number
  }

  export type taskReportCreateOrConnectWithoutTaskInput = {
    where: taskReportWhereUniqueInput
    create: XOR<taskReportCreateWithoutTaskInput, taskReportUncheckedCreateWithoutTaskInput>
  }

  export type taskReportCreateManyTaskInputEnvelope = {
    data: Enumerable<taskReportCreateManyTaskInput>
    skipDuplicates?: boolean
  }

  export type responsibleUpsertWithoutTaskInput = {
    update: XOR<responsibleUpdateWithoutTaskInput, responsibleUncheckedUpdateWithoutTaskInput>
    create: XOR<responsibleCreateWithoutTaskInput, responsibleUncheckedCreateWithoutTaskInput>
  }

  export type responsibleUpdateWithoutTaskInput = {
    name?: StringFieldUpdateOperationsInput | string
    taskReport?: taskReportUpdateManyWithoutResponsibleNestedInput
  }

  export type responsibleUncheckedUpdateWithoutTaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    taskReport?: taskReportUncheckedUpdateManyWithoutResponsibleNestedInput
  }

  export type taskReportUpsertWithWhereUniqueWithoutTaskInput = {
    where: taskReportWhereUniqueInput
    update: XOR<taskReportUpdateWithoutTaskInput, taskReportUncheckedUpdateWithoutTaskInput>
    create: XOR<taskReportCreateWithoutTaskInput, taskReportUncheckedCreateWithoutTaskInput>
  }

  export type taskReportUpdateWithWhereUniqueWithoutTaskInput = {
    where: taskReportWhereUniqueInput
    data: XOR<taskReportUpdateWithoutTaskInput, taskReportUncheckedUpdateWithoutTaskInput>
  }

  export type taskReportUpdateManyWithWhereWithoutTaskInput = {
    where: taskReportScalarWhereInput
    data: XOR<taskReportUpdateManyMutationInput, taskReportUncheckedUpdateManyWithoutTaskReportInput>
  }

  export type taskCreateWithoutTaskReportInput = {
    name: string
    description: string
    day: Date | string
    status: string
    responsible: responsibleCreateNestedOneWithoutTaskInput
  }

  export type taskUncheckedCreateWithoutTaskReportInput = {
    id?: number
    responsibleId: number
    name: string
    description: string
    day: Date | string
    status: string
  }

  export type taskCreateOrConnectWithoutTaskReportInput = {
    where: taskWhereUniqueInput
    create: XOR<taskCreateWithoutTaskReportInput, taskUncheckedCreateWithoutTaskReportInput>
  }

  export type responsibleCreateWithoutTaskReportInput = {
    name: string
    task?: taskCreateNestedManyWithoutResponsibleInput
  }

  export type responsibleUncheckedCreateWithoutTaskReportInput = {
    id?: number
    name: string
    task?: taskUncheckedCreateNestedManyWithoutResponsibleInput
  }

  export type responsibleCreateOrConnectWithoutTaskReportInput = {
    where: responsibleWhereUniqueInput
    create: XOR<responsibleCreateWithoutTaskReportInput, responsibleUncheckedCreateWithoutTaskReportInput>
  }

  export type taskUpsertWithoutTaskReportInput = {
    update: XOR<taskUpdateWithoutTaskReportInput, taskUncheckedUpdateWithoutTaskReportInput>
    create: XOR<taskCreateWithoutTaskReportInput, taskUncheckedCreateWithoutTaskReportInput>
  }

  export type taskUpdateWithoutTaskReportInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    day?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    responsible?: responsibleUpdateOneRequiredWithoutTaskNestedInput
  }

  export type taskUncheckedUpdateWithoutTaskReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    responsibleId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    day?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type responsibleUpsertWithoutTaskReportInput = {
    update: XOR<responsibleUpdateWithoutTaskReportInput, responsibleUncheckedUpdateWithoutTaskReportInput>
    create: XOR<responsibleCreateWithoutTaskReportInput, responsibleUncheckedCreateWithoutTaskReportInput>
  }

  export type responsibleUpdateWithoutTaskReportInput = {
    name?: StringFieldUpdateOperationsInput | string
    task?: taskUpdateManyWithoutResponsibleNestedInput
  }

  export type responsibleUncheckedUpdateWithoutTaskReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    task?: taskUncheckedUpdateManyWithoutResponsibleNestedInput
  }

  export type taskCreateManyResponsibleInput = {
    id?: number
    name: string
    description: string
    day: Date | string
    status: string
  }

  export type taskReportCreateManyResponsibleInput = {
    id?: number
    description: string
    taskId: number
  }

  export type taskUpdateWithoutResponsibleInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    day?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    taskReport?: taskReportUpdateManyWithoutTaskNestedInput
  }

  export type taskUncheckedUpdateWithoutResponsibleInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    day?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    taskReport?: taskReportUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type taskUncheckedUpdateManyWithoutTaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    day?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type taskReportUpdateWithoutResponsibleInput = {
    description?: StringFieldUpdateOperationsInput | string
    task?: taskUpdateOneRequiredWithoutTaskReportNestedInput
  }

  export type taskReportUncheckedUpdateWithoutResponsibleInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    taskId?: IntFieldUpdateOperationsInput | number
  }

  export type taskReportUncheckedUpdateManyWithoutTaskReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    taskId?: IntFieldUpdateOperationsInput | number
  }

  export type taskReportCreateManyTaskInput = {
    id?: number
    description: string
    responsibleId: number
  }

  export type taskReportUpdateWithoutTaskInput = {
    description?: StringFieldUpdateOperationsInput | string
    responsible?: responsibleUpdateOneRequiredWithoutTaskReportNestedInput
  }

  export type taskReportUncheckedUpdateWithoutTaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    responsibleId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}